// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/exchange_rate.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExchangeRateService_GetRates_FullMethodName    = "/exchange_rate.ExchangeRateService/GetRates"
	ExchangeRateService_Healthcheck_FullMethodName = "/exchange_rate.ExchangeRateService/Healthcheck"
)

// ExchangeRateServiceClient is the client API for ExchangeRateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeRateServiceClient interface {
	GetRates(ctx context.Context, in *GetRatesRequest, opts ...grpc.CallOption) (*GetRatesResponse, error)
	Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
}

type exchangeRateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeRateServiceClient(cc grpc.ClientConnInterface) ExchangeRateServiceClient {
	return &exchangeRateServiceClient{cc}
}

func (c *exchangeRateServiceClient) GetRates(ctx context.Context, in *GetRatesRequest, opts ...grpc.CallOption) (*GetRatesResponse, error) {
	out := new(GetRatesResponse)
	err := c.cc.Invoke(ctx, ExchangeRateService_GetRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateServiceClient) Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, ExchangeRateService_Healthcheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeRateServiceServer is the server API for ExchangeRateService service.
// All implementations must embed UnimplementedExchangeRateServiceServer
// for forward compatibility
type ExchangeRateServiceServer interface {
	GetRates(context.Context, *GetRatesRequest) (*GetRatesResponse, error)
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
	mustEmbedUnimplementedExchangeRateServiceServer()
}

// UnimplementedExchangeRateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeRateServiceServer struct {
}

func (UnimplementedExchangeRateServiceServer) GetRates(context.Context, *GetRatesRequest) (*GetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedExchangeRateServiceServer) Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedExchangeRateServiceServer) mustEmbedUnimplementedExchangeRateServiceServer() {}

// UnsafeExchangeRateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeRateServiceServer will
// result in compilation errors.
type UnsafeExchangeRateServiceServer interface {
	mustEmbedUnimplementedExchangeRateServiceServer()
}

func RegisterExchangeRateServiceServer(s grpc.ServiceRegistrar, srv ExchangeRateServiceServer) {
	s.RegisterService(&ExchangeRateService_ServiceDesc, srv)
}

func _ExchangeRateService_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServiceServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRateService_GetRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServiceServer).GetRates(ctx, req.(*GetRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRateService_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServiceServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRateService_Healthcheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServiceServer).Healthcheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeRateService_ServiceDesc is the grpc.ServiceDesc for ExchangeRateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeRateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange_rate.ExchangeRateService",
	HandlerType: (*ExchangeRateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _ExchangeRateService_GetRates_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _ExchangeRateService_Healthcheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/exchange_rate.proto",
}
